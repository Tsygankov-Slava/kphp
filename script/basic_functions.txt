<?php


define('PHP_INT_MAX', 9223372036854775807);
define('PHP_INT_MIN', -9223372036854775808);
define('PHP_INT_SIZE', 8);
define('PHP_EOL', "\n");

if (0) {
  define('PHP_SAPI', php_sapi_name());//"Defined in source code"
}




define('E_ERROR', 1);
define('E_WARNING', 2);
define('E_PARSE', 4);
define('E_NOTICE', 8);
define('E_CORE_ERROR', 16);
define('E_CORE_WARNING', 32);
define('E_COMPILE_ERROR', 64);
define('E_COMPILE_WARNING', 128);
define('E_USER_ERROR', 256);
define('E_USER_WARNING', 512);
define('E_USER_NOTICE', 1024);
define('E_STRICT', 2048);
define('E_RECOVERABLE_ERROR', 4096);
define('E_DEPRECATED', 8192);
define('E_USER_DEPRECATED', 16384);
define('E_ALL', 32767);




function getKeyByPos ($a ::: array, $n ::: int) ::: mixed;
function getValueByPos ($a ::: array, $n ::: int) ::: ^1[*];
function create_vector ($n ::: int, $x ::: any) ::: ^2[];
function array_first_key ($a ::: array) ::: mixed;
function array_key_first($a ::: array): mixed;
function array_first_value ($a ::: array) ::: ^1[*];
function array_last_key ($a ::: array) ::: mixed;
function array_key_last($a ::: array): mixed;
function array_last_value ($a ::: array) ::: ^1[*];
function array_swap_int_keys (&$a ::: array, $idx1 ::: int, $idx2 ::: int) ::: void;

function implode ($s ::: string, $v ::: array) ::: string;
function explode ($delimiter ::: string, $str ::: string, $limit ::: int = PHP_INT_MAX) ::: string[];

function array_chunk ($a ::: array, $chunk_size ::: int, $preserve_keys ::: bool = false) ::: ^1[];

function array_splice (&$a ::: array, $offset ::: int, $length ::: int, $replacement ::: array = array()) ::: ^1;
/** @kphp-extern-func-info cpp_template_call */
function array_merge ($a1 ::: array, $a2  ::: array = array(), $a3  ::: array = array(),
            $a4 ::: array = array(), $a5  ::: array = array(), $a6  ::: array = array(),
            $a7 ::: array = array(), $a8  ::: array = array(), $a9  ::: array = array(),
           $a10 ::: array = array(), $a11 ::: array = array(), $a12 ::: array = array())
                ::: ^1 | ^2 | ^3 | ^4 | ^5 | ^6 | ^7 | ^8 | ^9 | ^10 | ^11 | ^12;
/**
 * @kphp-extern-func-info cpp_template_call cpp_variadic_call
 * @kphp-pure-function
 */
function array_merge_recursive (...$a) ::: mixed[];
function array_merge_into (&$a ::: array, $another_array ::: array) ::: void;
/** @kphp-extern-func-info cpp_template_call */
function array_merge_spread ($a1 ::: array, $a2  ::: array = array(), $a3  ::: array = array(),
            $a4 ::: array = array(), $a5  ::: array = array(), $a6  ::: array = array(),
            $a7 ::: array = array(), $a8  ::: array = array(), $a9  ::: array = array(),
           $a10 ::: array = array(), $a11 ::: array = array(), $a12 ::: array = array())
                ::: ^1 | ^2 | ^3 | ^4 | ^5 | ^6 | ^7 | ^8 | ^9 | ^10 | ^11 | ^12;
/** @kphp-extern-func-info cpp_template_call */
function array_replace ($base_array ::: array,
            $replacements_1 ::: array = array(), $replacements_2  ::: array = array(), $replacements_3  ::: array = array(),
            $replacements_4 ::: array = array(), $replacements_5  ::: array = array(), $replacements_6  ::: array = array(),
            $replacements_7 ::: array = array(), $replacements_8  ::: array = array(), $replacements_9  ::: array = array(),
            $replacements_10 ::: array = array(), $replacements_11 ::: array = array())
                ::: ^1 | ^2 | ^3 | ^4 | ^5 | ^6 | ^7 | ^8 | ^9 | ^10 | ^11 | ^12;
function array_intersect_key ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_intersect ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_intersect_assoc ($a1 ::: array, $a2 ::: array, $a3 ::: array = TODO) ::: ^1;
function array_diff_key ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_diff ($a1 ::: array, $a2 ::: array, $a3 ::: array = TODO) ::: ^1;
function array_diff_assoc ($a1 ::: array, $a2 ::: array, $a3 ::: array = TODO) ::: ^1;
function array_reverse ($a ::: array, $preserve_keys ::: bool = false) ::: ^1;
function array_shift (&$a ::: array) ::: ^1[*];
function array_unshift (&$a ::: array, $val ::: any) ::: int;
function array_key_exists ($v ::: any, $a ::: array) ::: bool;
function array_search ($val ::: any, $a ::: array, $strict ::: bool = false) ::: mixed;
function array_find ($val ::: array, callable(^1[*] $x):bool $callback) ::: tuple(mixed, ^1[*]);
function array_rand ($a ::: array, $num ::: int = 1) ::: mixed;
function array_keys ($a ::: array) ::: mixed[];
function array_keys_as_strings ($a ::: array) ::: string[];
function array_keys_as_ints ($a ::: array) ::: int[];
function array_values ($a ::: array) ::: ^1;
function array_unique ($a ::: array, int $flags = SORT_STRING) ::: ^1;
function array_count_values ($a ::: array) ::: int[];
function array_flip ($a ::: array) ::: mixed[];
function in_array ($value ::: any, $a ::: array, $strict ::: bool = false) ::: bool;
function array_fill ($start_index ::: int, $num ::: int, $value ::: any) ::: ^3[];
function array_fill_keys ($a ::: array, $value ::: any) ::: ^2[];
function array_combine ($keys ::: array, $values ::: array) ::: ^2;
function range ($from, $to, $step ::: int = 1) ::: mixed[];//TODO
function array_push (&$a ::: array, $val2 ::: any, $val3 ::: any = TODO, $val4 ::: any = TODO, $val5 ::: any = TODO, $val6 ::: any = TODO) ::: int;
function array_pop (&$a ::: array) ::: ^1[*];
function array_sum ($a ::: array) ::: float;//TODO
function array_slice ($a ::: array, $offset ::: int, $length = null, $preserve_keys ::: bool = false) ::: ^1;
/** @kphp-extern-func-info cpp_template_call */
function array_pad ($a ::: array, $size ::: int, $value ::: any) ::: array< ^1[*] | ^3 >;
function array_column ($a ::: array, $column_key, $index_key = null) ::: array< ^1[*][*] > | false;
function array_unset (&$a ::: array, any $key) ::: ^1[*];

/**
 * @kphp-extern-func-info cpp_template_call cpp_variadic_call
 * @kphp-pure-function
 */
function min (...$a) ::: ^1[*];
/**
 * @kphp-extern-func-info cpp_template_call cpp_variadic_call
 * @kphp-pure-function
 */
function max (...$a) ::: ^1[*];

function array_filter ($a ::: array, callable(^1[*] $x):bool $callback = TODO) ::: ^1;
function array_filter_by_key ($a ::: array, callable(mixed $key):bool $callback) ::: ^1;
function array_map (callable(^2[*] $x):any $callback, $a ::: array) ::: ^1() [];
/** @kphp-extern-func-info cpp_template_call */
function array_reduce ($a ::: array, callable(^3 | ^2() $carry, ^1[*] $item):any $callback, $initial ::: any) ::: ^2() | ^3;
function array_reserve (&$a ::: array, $int_size ::: int, $string_size ::: int, $make_vector_if_possible ::: bool) ::: void;
function array_reserve_vector (&$a ::: array, $size ::: int) ::: void;
function array_reserve_map_int_keys (&$a ::: array, $size ::: int) ::: void;
function array_reserve_map_string_keys (&$a ::: array, $size ::: int) ::: void;
function array_reserve_from (&$a ::: array, $base ::: array) ::: void;
function array_is_vector ($a ::: array) ::: bool;
function array_is_list ($a ::: array) ::: bool;

define('DATE_ATOM', "Y-m-d\TH:i:sP");
define('DATE_COOKIE', "l, d-M-y H:i:s T");
define('DATE_ISO8601', "Y-m-d\TH:i:sO");
define('DATE_RFC822', "D, d M y H:i:s O");
define('DATE_RFC850', "l, d-M-y H:i:s T");
define('DATE_RFC1036', "D, d M y H:i:s O");
define('DATE_RFC1123', "D, d M Y H:i:s O");
define('DATE_RFC2822', "D, d M Y H:i:s O");
define('DATE_RFC3339', "Y-m-d\TH:i:sP");
define('DATE_RSS', "D, d M Y H:i:s O");
define('DATE_W3C', "Y-m-d\TH:i:sP");

function checkdate ($month ::: int, $day ::: int, $year ::: int) ::: bool;
function date ($format ::: string, $timestamp ::: int = PHP_INT_MIN) ::: string;
function date_default_timezone_set ($s ::: string) ::: bool;
function date_default_timezone_get() ::: string;
function getdate ($timestamp ::: int = PHP_INT_MIN) ::: mixed[];
function gmdate ($format ::: string, $timestamp ::: int = PHP_INT_MIN) ::: string;
function gmmktime ($h ::: int = PHP_INT_MIN, $m ::: int = PHP_INT_MIN, $s ::: int = PHP_INT_MIN, $month ::: int = PHP_INT_MIN, $day ::: int = PHP_INT_MIN, $year ::: int = PHP_INT_MIN) ::: int;
function localtime ($timestamp ::: int = PHP_INT_MIN, $is_associative ::: bool = false) ::: mixed[];
function microtime ($get_as_float ::: bool = false) ::: mixed;
function mktime ($h ::: int = PHP_INT_MIN, $m ::: int = PHP_INT_MIN, $s ::: int = PHP_INT_MIN, $month ::: int = PHP_INT_MIN, $day ::: int = PHP_INT_MIN, $year ::: int = PHP_INT_MIN) ::: int;
function strftime ($format ::: string, $timestamp ::: int = PHP_INT_MIN) ::: string;
function strtotime ($time ::: string, $timestamp ::: int = PHP_INT_MIN) ::: int | false;
function date_parse ($time ::: string) : mixed[];
function date_parse_from_format ($format ::: string, $time ::: string) : mixed[];
function time() ::: int;
function hrtime (bool $as_number = false): mixed; // int[]|int

function debug_backtrace() ::: string[][];
function posix_getpid() ::: int;
function posix_getuid() ::: int;
function posix_getpwuid($uid ::: int) ::: mixed[] | false;
function getopt ($options ::: string, $longopt ::: array = array(), ?int &$rest_index = null) ::: mixed[] | false;
function gethostbynamel ($name ::: string) ::: string[] | false;
function inet_pton ($address ::: string) ::: string | false;

function pack ($pattern ::: string, ...$args) ::: string;
function unpack ($pattern ::: string, $data ::: string) ::: mixed[] | false;

define('PREG_NO_ERROR', 0);
define('PREG_INTERNAL_ERROR', 1);
define('PREG_BACKTRACK_LIMIT_ERROR', 2);
define('PREG_RECURSION_LIMIT_ERROR', 3);
define('PREG_BAD_UTF8_ERROR', 4);
define('PREG_BAD_UTF8_OFFSET_ERROR', 5);

define('PREG_PATTERN_ORDER', 1);
define('PREG_SET_ORDER', 2);
define('PREG_OFFSET_CAPTURE', 4);
define('PREG_SPLIT_NO_EMPTY', 8);
define('PREG_SPLIT_DELIM_CAPTURE', 16);
define('PREG_SPLIT_OFFSET_CAPTURE', 32);

function preg_match ($regex ::: regexp, $subject ::: string, &$matches ::: mixed = TODO, $flags ::: int = 0, $offset ::: int = 0) ::: int | false;//TODO
function preg_match_all ($regex ::: regexp, $subject ::: string, &$matches ::: mixed = TODO, $flags ::: int = 0, $offset ::: int = 0) ::: int | false;//TODO
function preg_replace ($regex ::: regexp, $replace_val, $subject, $limit ::: int = -1, &$replace_count ::: int = TODO) ::: ^3|string|null|false;
function preg_replace_callback ($regex ::: regexp, callable(string[] $x):string $callback, $subject, $limit ::: int = -1, &$replace_count ::: int = TODO) ::: ^3|string|null;
function preg_quote ($str ::: string, $delimiter ::: string = '') ::: string;
function preg_last_error() ::: int;
function preg_split ($pattern ::: regexp, $subject ::: string, $limit ::: int = -1, $flags ::: int = 0) ::: mixed[] | false;

function shuffle (&$a ::: array) ::: void;
function sort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function rsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function usort (&$a ::: array, callable(^1[*] $x, ^1[*] $y):int $callback) ::: void;
function asort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function arsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function uasort (&$a ::: array, callable(^1[*] $x, ^1[*] $y):int $callback) ::: void;
function ksort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function krsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function uksort (&$a ::: array, callable(mixed $x, mixed $y):int $callback) ::: void;
function natsort (&$a ::: array) ::: void;

function lcg_value() ::: float;
function uniqid ($prefix ::: string = '', $more_entropy ::: bool = false) ::: string;

function srand ($seed ::: int = PHP_INT_MIN) ::: void;
function rand ($l ::: int = TODO_OVERLOAD, $r ::: int = TODO_OVERLOAD) ::: int;
function getrandmax() ::: int;
function mt_srand ($seed ::: int = PHP_INT_MIN) ::: void;
function mt_rand ($l ::: int = TODO_OVERLOAD, $r ::: int = TODO_OVERLOAD) ::: int;
function mt_getrandmax() ::: int;

function hash_algos () ::: string[];
function hash_hmac_algos () ::: string[];
function hash ($algo ::: string, $data ::: string, $raw_output ::: bool = false) ::: string;
function hash_hmac ($algo ::: string, $data ::: string, $key ::: string, $raw_output ::: bool = false) ::: string;
function sha1 ($s ::: string, $raw_output ::: bool = false) ::: string;
function md5 ($s ::: string, $raw_output ::: bool = false) ::: string;
function md5_file ($s ::: string, $raw_output ::: bool = false) ::: string | false;
function crc32 ($s ::: string) ::: int;
function crc32_file ($s ::: string) ::: int;
function hash_equals(string $known_string, string $user_string) ::: bool;
/** @kphp-pure-function */
function cp1251 ($utf8_string ::: string) ::: string;



define('ZLIB_ENCODING_RAW', -0x0f);
define('ZLIB_ENCODING_DEFLATE', 0x0f);
define('ZLIB_ENCODING_GZIP', 0x1f);

define('ZLIB_NO_FLUSH', 0);
define('ZLIB_PARTIAL_FLUSH', 1);
define('ZLIB_SYNC_FLUSH', 2);
define('ZLIB_FULL_FLUSH', 3);
define('ZLIB_FINISH', 4);
define('ZLIB_BLOCK', 5);
define('ZLIB_TREES', 6);

define('ZLIB_FILTERED', 1);
define('ZLIB_HUFFMAN_ONLY', 2);
define('ZLIB_RLE', 3);
define('ZLIB_FIXED', 4);
define('ZLIB_DEFAULT_STRATEGY', 0);

define('PHP_QUERY_RFC1738', 1);
define('PHP_QUERY_RFC3986', 2);

function deflate_init(int $encoding, array $options = []) ::: ?DeflateContext;
function deflate_add(DeflateContext $context, string $data, int $flush_mode = ZLIB_SYNC_FLUSH) ::: string | false;
function gzencode ($str ::: string, $level ::: int = -1) ::: string;
function gzdecode ($str ::: string) ::: string;
function gzcompress ($str ::: string, $level ::: int = -1) ::: string;
function gzuncompress ($str ::: string) ::: string;
function gzdeflate ($str ::: string, $level ::: int = -1) ::: string;
function gzinflate ($str ::: string) ::: string;
function base64_decode ($str ::: string, $strict ::: bool = false) ::: string | false;
function base64_encode ($str ::: string) ::: string;
function http_build_query ($str ::: array, $numeric_prefix ::: string = '', $arg_separator ::: string = '&', $enc_type ::: int = PHP_QUERY_RFC1738) ::: string;
function rawurldecode ($str ::: string) ::: string;
function rawurlencode ($str ::: string) ::: string;
function urldecode ($str ::: string) ::: string;
function urlencode ($str ::: string) ::: string;

define('PHP_URL_SCHEME', 0);
define('PHP_URL_HOST', 1);
define('PHP_URL_PORT', 2);
define('PHP_URL_USER', 3);
define('PHP_URL_PASS', 4);
define('PHP_URL_PATH', 5);
define('PHP_URL_QUERY', 6);
define('PHP_URL_FRAGMENT', 7);

function parse_url ($str ::: string, $component ::: int = -1) ::: mixed;

define('M_PI', 3.1415926535897932384626433832795);
define('M_E', 2.7182818284590452354);
define('M_LOG2E', 1.4426950408889634074);
define('M_LOG10E', 0.43429448190325182765);
define('M_LN2', 0.69314718055994530942);
define('M_LN10', 2.30258509299404568402);
define('M_PI_2', 1.57079632679489661923);
define('M_PI_4', 0.78539816339744830962);
define('M_1_PI', 0.31830988618379067154);
define('M_2_PI', 0.63661977236758134308);
define('M_SQRTPI', 1.77245385090551602729);
define('M_2_SQRTPI', 1.12837916709551257390);
define('M_SQRT2', 1.41421356237309504880);
define('M_SQRT3', 1.73205080756887729352);
define('M_SQRT1_2', 0.70710678118654752440);
define('M_LNPI', 1.14472988584940017414);
define('M_EULER', 0.57721566490153286061);

/** @kphp-pure-function */
function abs ($v ::: mixed) ::: ^1 | int;
/** @kphp-pure-function */
function acos ($v ::: float) ::: float;
/** @kphp-pure-function */
function acosh ($v ::: float) ::: float;
/** @kphp-pure-function */
function asin ($v ::: float) ::: float;
/** @kphp-pure-function */
function asinh ($v ::: float) ::: float;
/** @kphp-pure-function */
function atan ($v ::: float) ::: float;
/** @kphp-pure-function */
function atan2 ($y ::: float, $x ::: float) ::: float;
/** @kphp-pure-function */
function base_convert ($number ::: string, $frombase ::: int, $tobase ::: int) ::: string;
/** @kphp-pure-function */
function ceil ($v ::: float) ::: float;
/** @kphp-pure-function */
function cos ($v ::: float) ::: float;
/** @kphp-pure-function */
function cosh ($v ::: float) ::: float;
/** @kphp-pure-function */
function deg2rad ($v ::: float) ::: float;
/** @kphp-pure-function */
function exp ($v ::: float) ::: float;
/** @kphp-pure-function */
function floor ($v ::: float) ::: float;
/** @kphp-pure-function */
function log ($v ::: float, $base ::: float = 2.7182818284590452353602874713527) ::: float;
/** @kphp-pure-function */
function fmod ($x ::: float, $y ::: float) ::: float;
/** @kphp-pure-function */
function pi() ::: float;
/** @kphp-pure-function */
function round ($v ::: float, $precision ::: int = 0) ::: float;
/** @kphp-pure-function */
function sin ($v ::: float) ::: float;
/** @kphp-pure-function */
function sinh ($v ::: float) ::: float;
/** @kphp-pure-function */
function sqrt ($v ::: float) ::: float;
/** @kphp-pure-function */
function tan ($v ::: float) ::: float;
/** @kphp-pure-function */
function rad2deg ($v ::: float) ::: float;


define('ENT_HTML401', 0);
define('ENT_COMPAT', 0);
define('ENT_QUOTES', 1);
define('ENT_NOQUOTES', 2);

function addcslashes ($str ::: string, $what ::: string) ::: string;
function addslashes ($str ::: string) ::: string;
function bin2hex ($str ::: string) ::: string;
function chop ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;
function chr ($v ::: int) ::: string;
function convert_cyr_string ($str ::: string, $from ::: string, $to ::: string) ::: string;
function count_chars ($str ::: string, $mode ::: int = 0) ::: mixed;
function hex2bin ($str ::: string) ::: string;
function htmlentities ($str ::: string) ::: string;
function html_entity_decode ($str ::: string, $flags ::: int = ENT_COMPAT, $encoding ::: string = "cp1251") ::: string;
function htmlspecialchars ($str ::: string, $flags ::: int = ENT_COMPAT) ::: string;
function htmlspecialchars_decode ($str ::: string, $flags ::: int = ENT_COMPAT) ::: string;
function levenshtein ($str1 ::: string, $str2 ::: string) ::: int;
function nl2br ($str ::: string, $is_xhtml = true) ::: string;
function number_format ($number ::: float, $decimals ::: int = 0, $dec_point = '.', $thousands_sep = ',') ::: string;
function parse_str ($str ::: string, &$arr ::: mixed) ::: void; // TODO: why no ::: array? // TODO because it is an output parameter, input can have any type and it's ok.
function ord ($c ::: string) ::: int;
function strcasecmp ($str1 ::: string, $str2 ::: string) ::: int;
function strcmp ($str1 ::: string, $str2 ::: string) ::: int;
function stripcslashes ($str ::: string) ::: string;
function stripslashes ($str ::: string) ::: string;
function strip_tags ($str ::: string, $allow ::: string|string[] = "") ::: string;
function strncmp ($str1 ::: string, $str2 ::: string, $len ::: int) ::: int;
function strnatcmp ($str1 ::: string, $str2 ::: string) ::: int;
function wordwrap ($str ::: string, $width ::: int = 75, $break ::: string = '\n', $cut ::: bool = false) ::: string;
function lcfirst ($str ::: string) ::: string;
function ucfirst ($str ::: string) ::: string;
function ucwords ($str ::: string) ::: string;

function mysql_escape_string ($str ::: string) ::: string;

function bindec ($number ::: string) ::: int;
function decbin ($number ::: int) ::: string;
function dechex ($number ::: int) ::: string;
function hexdec ($number ::: string) ::: int;

function ip2long ($ip ::: string) ::: int | false;
function ip2ulong ($ip ::: string) ::: string | false;
function long2ip ($ip ::: int) ::: string;
function thread_pool_test_load($size ::: int, $n ::: int, $a ::: float, $b ::: float) ::: float;

function get_magic_quotes_gpc() ::: bool;
function php_sapi_name() ::: string;

define('STR_PAD_LEFT', 0);
define('STR_PAD_RIGHT', 1);
define('STR_PAD_BOTH', 2);

function str_pad ($input ::: string, $len ::: int, $pad_str ::: string = " ", $pad_type ::: int = STR_PAD_RIGHT) ::: string;
function str_repeat ($s ::: string, $multiplier ::: int) ::: string;



function vprintf ($format ::: string, $args ::: array) ::: int;
function printf ($format ::: string, ...$args) ::: int;
function vsprintf ($format ::: string, $args ::: array) ::: string;
function sprintf ($format ::: string, ...$args) ::: string;
function vfprintf ($stream, $format ::: string, $args ::: array) ::: int;
function fprintf ($stream, $format ::: string, ...$args) ::: int;

function fputcsv ($stream, $fields ::: array, $delimiter = ",", $enclosure = "\"", $escape = "\\") ::: int | false;
function fgetcsv ($stream, $length = 0, $delimiter = ",", $enclosure = "\"", $escape = "\\") ::: mixed[] | false;

function strtr ($subject ::: string, $replace_pairs, $third = TODO) ::: string;//TODO
//function strtr ($subject, $from, $to);
function str_replace ($search, $replace, $subject, &$count ::: int = TODO) ::: ^3 | string;
function str_ireplace ($search, $replace, $subject, &$count ::: int = TODO) ::: ^3 | string;
function str_split ($str ::: string, $split_length ::: int = 1) ::: string[];
function strlen ($str ::: string) ::: int;
function strspn ($haystack ::: string, $char_list ::: string, $offset ::: int = 0) ::: int;
function strcspn ($haystack ::: string, $char_list ::: string, $offset ::: int = 0) ::: int;
function strpbrk ($haystack ::: string, $char_list ::: string) ::: string | false;
function strpos ($haystack ::: string, $needle, $offset ::: int = 0) ::: int | false;
function stripos ($haystack ::: string, $needle, $offset ::: int = 0) ::: int | false;
function strrpos ($haystack ::: string, $needle, $offset ::: int = 0) ::: int | false;
function strripos ($haystack ::: string, $needle, $offset ::: int = 0) ::: int | false;
function strstr ($haystack ::: string, $needle, $before_needle ::: bool = false) ::: string | false;
function stristr ($haystack ::: string, $needle, $before_needle ::: bool = false) ::: string | false;
function strrchr ($haystack ::: string, $needle ::: string) ::: string | false;
function strrev ($str ::: string) ::: string;
function strtolower ($str ::: string) ::: string;
function strtoupper ($str ::: string) ::: string;
/** @kphp-internal-param-readonly $str */
function substr ($str ::: string, $start ::: int, $length ::: int = PHP_INT_MAX) ::: string | false;
function substr_count ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $length ::: int = PHP_INT_MAX) ::: int;
function substr_replace (string $str, string $replacement, $start ::: int, $length ::: int = PHP_INT_MAX) ::: string;
function substr_compare ($main_str ::: string, $str ::: string, $offset ::: int, $length ::: int = PHP_INT_MAX, $case_insensitivity ::: bool = false) ::: int | false;

function str_starts_with ($haystack ::: string, $needle ::: string) ::: bool;
function str_ends_with ($haystack ::: string, $needle ::: string) ::: bool;

/** @kphp-internal-param-readonly $s */
function trim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;
function ltrim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;
function rtrim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;

function xor_strings ($s ::: string, $t ::: string) ::: string;
function similar_text ($first ::: string, $second ::: string, float &$percent = TODO) ::: int;

function extension_loaded(string $extension): bool;

function ctype_alnum(mixed $text): bool;
function ctype_alpha(mixed $text): bool;
function ctype_cntrl(mixed $text): bool;
function ctype_digit(mixed $text): bool;
function ctype_graph(mixed $text): bool;
function ctype_lower(mixed $text): bool;
function ctype_print(mixed $text): bool;
function ctype_punct(mixed $text): bool;
function ctype_space(mixed $text): bool;
function ctype_upper(mixed $text): bool;
function ctype_xdigit(mixed $text): bool;

define('LC_ALL', 6);
define('LC_COLLATE', 3);
define('LC_CTYPE', 0);
define('LC_MONETARY', 4);
define('LC_NUMERIC', 1);
define('LC_TIME', 2);
define('LC_MESSAGES', 5);

function setlocale ($category ::: int, $locale ::: string) ::: string | false;

function iconv ($input_encoding ::: string, $output_encoding ::: string, $input_str ::: string) ::: string | false;

function mb_check_encoding ($str ::: string, $encoding ::: string = "cp1251") ::: bool;
function mb_strlen ($str ::: string, $encoding ::: string = "cp1251") ::: int;
function mb_strpos ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $encoding ::: string = "cp1251") ::: int | false;
function mb_stripos ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $encoding ::: string = "cp1251") ::: int | false;
function mb_strtolower ($str ::: string, $encoding ::: string = "cp1251") ::: string;
function mb_strtoupper ($str ::: string, $encoding ::: string = "cp1251") ::: string;
function mb_substr ($str ::: string, $start ::: int, $length ::: mixed = PHP_INT_MAX, $encoding ::: string = "cp1251") ::: string;

define('PHP_ROUND_HALF_UP', 123423141);
define('PHP_ROUND_HALF_DOWN', 123423144);
define('PHP_ROUND_HALF_EVEN', 123423145);
define('PHP_ROUND_HALF_ODD', 123423146);

function bcscale ($scale ::: int) ::: void;
function bcdiv ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bcmod ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bcpow ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bcadd ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bcsub ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bcmul ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: string;
function bccomp ($lhs ::: string, $rhs ::: string, $scale ::: int = PHP_INT_MIN) ::: int;
function bcsqrt($num ::: string, $scale ::: int = PHP_INT_MIN): string;



function function_exists ($func_name ::: mixed) ::: bool;

define('FILE_APPEND', 1);

function basename ($name ::: string, $suffix ::: string = '') ::: string;
function chmod ($name ::: string, $mode ::: int) ::: bool;
function clearstatcache() ::: void;
function copy ($from ::: string, $to ::: string) ::: bool;
function dirname ($name ::: string) ::: string;
function file ($name ::: string) ::: string[] | false;
function file_get_contents ($name ::: string) ::: string | false;
function file_put_contents ($name ::: string, $content ::: mixed, $flags ::: int = 0) ::: int | false;
function file_exists ($name ::: string) ::: bool;
function filesize ($name ::: string) ::: int | false;
function filectime ($name ::: string) ::: int | false;
function filemtime ($name ::: string) ::: int | false;
function is_dir ($name ::: string) ::: bool;
function is_file ($name ::: string) ::: bool;
function is_readable ($name ::: string) ::: bool;
function is_writeable ($name ::: string) ::: bool;
function mkdir ($name ::: string, $mode ::: int = 0777, $recursive ::: bool = false) ::: bool;
function php_uname ($mode ::: string = "a") ::: string;
function rename ($oldname ::: string, $newname ::: string) ::: bool;
function realpath ($path ::: string) ::: string | false;
function tempnam ($dir ::: string, $prefix ::: string) ::: string | false;
function unlink ($name ::: string) ::: bool;
function scandir ($directory ::: string) ::: string[] | false;
function sleep ($seconds ::: int) ::: void;
function usleep ($micro_seconds ::: int) ::: void;

function getimagesize ($name ::: string) ::: mixed;

define('IMAGETYPE_UNKNOWN', 0);
define('IMAGETYPE_GIF', 1);
define('IMAGETYPE_JPEG', 2);
define('IMAGETYPE_PNG', 3);
define('IMAGETYPE_SWF', 4);
define('IMAGETYPE_PSD', 5);
define('IMAGETYPE_BMP', 6);
define('IMAGETYPE_TIFF_II', 7);
define('IMAGETYPE_TIFF_MM', 8);
define('IMAGETYPE_JPC', 9);
define('IMAGETYPE_JPEG2000', 9);
define('IMAGETYPE_JP2', 10);



/** @kphp-extern-func-info cpp_template_call */
function vk_dot_product ($a ::: array, $b ::: array) ::: ^1[*] | ^2[*];

/** defined in kphp_core.h **/
function likely ($x ::: bool) ::: bool;
function unlikely ($x ::: bool) ::: bool;

/** exceptions **/
function err ($file ::: string, $line ::: int, $code ::: string, $desc ::: string = '') ::: Exception;


/**
 * conversions
 * they should be there to work in array_map and similar
 * as function calls they are replaced by builtins anyway
 **/
function boolval ($v ::: any) ::: bool;
function intval ($v ::: mixed) ::: int;
function floatval ($v ::: mixed) ::: float;
function strval ($v ::: mixed) ::: string;

/** files **/
define('STDIN', 'php://stdin');
define('STDOUT', 'php://stdout');
define('STDERR', 'php://stderr');

define('SEEK_SET', 0);
define('SEEK_END', 1);
define('SEEK_CUR', 2);


function get_reference_counter ($v) ::: int;
function prepare_search_query ($query ::: string) ::: string;

/** For local usage only **/
function exec($command ::: string, &$output ::: mixed = [], int &$result_code = 0): string|false;
function system($command ::: string, int &$result_code = 0): int;
function passthru($command ::: string, int &$result_code = 0): false|null;
function escapeshellarg($arg ::: string): string;
function escapeshellcmd($cmd ::: string): string;

function raise_sigsegv () ::: void;
function make_clone ($x ::: any) ::: ^1;


// zstd api
function zstd_compress(string $data, int $level = 3) ::: string | false;
function zstd_uncompress(string $data) ::: string | false;
function zstd_compress_dict(string $data, string $dict) ::: string | false;
function zstd_uncompress_dict(string $data, string $dict) ::: string | false;

// re-initialize given ArrayIterator with another array;
// in KPHP it returns the same ArrayIterator that is ready to be used
// in PHP (via polyfills) it returns a newly allocated object
//
// reset_array_iterator is a KPHP extension of ArrayIterator API
function reset_array_iterator(ArrayIterator $iter, $array ::: mixed[]) : ArrayIterator;

class DateTimeZone {
  /** @kphp-extern-func-info can_throw */
  public function __construct(string $timezone);
  public function getName(): string;
}

class DateInterval {
  /** @kphp-extern-func-info can_throw */
  public function __construct(string $duration);
  public static function createFromDateString(string $datetime): ?DateInterval;
  public function format(string $format): string;
}

interface DateTimeInterface {
  /* Constants */
  const ATOM = "Y-m-d\TH:i:sP";
  const COOKIE = "l, d-M-Y H:i:s T";
  const ISO8601 = "Y-m-d\TH:i:sO";
  const RFC822 = "D, d M y H:i:s O";
  const RFC850 = "l, d-M-y H:i:s T";
  const RFC1036 = "D, d M y H:i:s O";
  const RFC1123 = "D, d M Y H:i:s O";
  const RFC7231 = "D, d M Y H:i:s \G\M\T";
  const RFC2822 = "D, d M Y H:i:s O";
  const RFC3339 = "Y-m-d\TH:i:sP";
  const RFC3339_EXTENDED = "Y-m-d\TH:i:s.vP";
  const RSS = "D, d M Y H:i:s O";
  const W3C = "Y-m-d\TH:i:sP";

  /* Methods */
  public function add(DateInterval $interval): DateTimeInterface;
  public function modify(string $modifier): ?DateTimeInterface;
  public function setDate(int $year, int $month, int $day): DateTimeInterface;
  public function setISODate(int $year, int $week, int $dayOfWeek = 1): DateTimeInterface;
  public function setTime(
      int $hour,
      int $minute,
      int $second = 0,
      int $microsecond = 0
  ): DateTimeInterface;
  public function setTimestamp(int $timestamp): DateTimeInterface;
  public function sub(DateInterval $interval): DateTimeInterface;
  public function diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval;
  public function format(string $format): string;
  public function getOffset(): int;
  public function getTimestamp(): int;
}

class DateTime implements DateTimeInterface {
  /** @kphp-extern-func-info can_throw */
  public function __construct(string $datetime = "now", ?DateTimeZone $timezone = null);
  public function add(DateInterval $interval): DateTime;
  public static function createFromFormat(string $format, string $datetime, ?DateTimeZone $timezone = null): ?DateTime;
  public static function createFromImmutable(DateTimeImmutable $object): DateTime;
  public static function getLastErrors(): array|false;
  public function modify(string $modifier): ?DateTime;
  public function setDate(int $year, int $month, int $day): DateTime;
  public function setISODate(int $year, int $week, int $dayOfWeek = 1): DateTime;
  public function setTime(
      int $hour,
      int $minute,
      int $second = 0,
      int $microsecond = 0
  ): DateTime;
  public function setTimestamp(int $timestamp): DateTime;
  public function sub(DateInterval $interval): DateTime;
  public function diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval;
  public function format(string $format): string;
  public function getOffset(): int;
  public function getTimestamp(): int;
}

class DateTimeImmutable implements DateTimeInterface {
  /** @kphp-extern-func-info can_throw */
  public function __construct(string $datetime = "now", ?DateTimeZone $timezone = null);
  public function add(DateInterval $interval): DateTimeImmutable;
  public static function createFromFormat(string $format, string $datetime, ?DateTimeZone $timezone = null): ?DateTimeImmutable;
  public static function createFromMutable(DateTime $object): DateTimeImmutable;
  public static function getLastErrors(): array|false;
  public function modify(string $modifier): ?DateTimeImmutable;
  public function setDate(int $year, int $month, int $day): DateTimeImmutable;
  public function setISODate(int $year, int $week, int $dayOfWeek = 1): DateTimeImmutable;
  public function setTime(
      int $hour,
      int $minute,
      int $second = 0,
      int $microsecond = 0
  ): DateTimeImmutable;
  public function setTimestamp(int $timestamp): DateTimeImmutable;
  public function sub(DateInterval $interval): DateTimeImmutable;
  public function diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval;
  public function format(string $format): string;
  public function getOffset(): int;
  public function getTimestamp(): int;
}

function getenv(string $varname = '', bool $local_only = false): mixed;